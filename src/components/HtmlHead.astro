---
// Fonts
import "@fontsource-variable/rubik";
import "@fontsource-variable/public-sans";
import publicSansWoff2 from "@fontsource-variable/public-sans/files/public-sans-latin-wght-normal.woff2?url";
import rubikWoff2 from "@fontsource-variable/rubik/files/rubik-latin-wght-normal.woff2?url";

// Styles
import "../styles/global.css";
import "../styles/light.css";
import "../styles/dark.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Alejandro Fernández Alburquerque",
  description = "The personal site of Alejandro Fernández Alburquerque",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link
  rel="preload"
  as="font"
  type="font/woff2"
  href={publicSansWoff2}
  crossorigin="anonymous"
/>
<link
  rel="preload"
  as="font"
  type="font/woff2"
  href={rubikWoff2}
  crossorigin="anonymous"
/>

<script is:inline>
  // This code is inlined in the head to make dark mode instant & blocking.
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList.add(isDark ? "theme-dark" : "theme-light");
  document.documentElement.classList.remove(
    isDark ? "theme-light" : "theme-dark",
  );

  if (typeof localStorage !== "undefined") {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
