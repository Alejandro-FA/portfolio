---
import { Image } from "astro:assets";
import { render, type CollectionEntry } from "astro:content";

import BaseLayout from "@layouts/BaseLayout.astro";
import MarkdownLayout from "@layouts/MarkdownLayout.astro";

import Hero from "@components/layout/Hero.astro";
import Icon from "@components/Icon.astro";
import Pill from "@components/Pill.astro";
import ContactCTA from "@components/layout/ContactCTA.astro";
import MarkdownImage from "@components/markdown/MarkdownImage.astro";
import ScrollableTable from "@components/markdown/ScrollableTable.astro";

import * as i18n from "@i18n";

interface Props {
  entry: CollectionEntry<"projects">;
}

const { entry } = Astro.props;

const locale = i18n.getLocaleFromUrl(Astro.url);
const t = i18n.getTranslations(locale);
const projectsUrl = i18n.getRelativeLocaleUrl(locale, t.routes.projects);

const { Content } = await render(entry);
const frontmatter = entry.data;
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <main class="wrapper stack gap-2">
    <nav class="wrapper row" aria-labelledby="project-navigation">
      <a class="back-link row gap-1" href={projectsUrl}
        ><Icon icon="arrow-left" /> {t.common.nav.projects}</a
      >
      {
        frontmatter.github && (
          <a
            class="github-link row gap-2"
            href={frontmatter.github}
            target="_blank"
            rel="noopener noreferrer"
          >
            <Icon viewBox="0 0 512 512" icon="github-logo" />{" "}
            {t.projects.githubLink}
          </a>
        )
      }
    </nav>
    <article>
      <Hero title={frontmatter.title} align="start">
        <div class="details">
          <div class="tags">
            {frontmatter.tags.map((t: string) => <Pill>{t}</Pill>)}
          </div>
          <p class="description">{frontmatter.description}</p>
        </div>
      </Hero>
      <MarkdownLayout class="content">
        <figure id="thumbnail">
          <Image
            src={frontmatter.thumbnail}
            alt={frontmatter.thumbnailAlt || ""}
            loading="eager"
            sizes="(min-width: 843px) 796px, calc(100vw - 3rem)"
            widths={[
              300, 380, 570, 760, 796, 855, 950, 1140, 1194, 1592, 1791, 1990,
              2388,
            ]}
          />
          <figcaption>{frontmatter.thumbnailAlt}</figcaption>
        </figure>
        <hr id="thumbnail-divider" />
        <Content components={{ img: MarkdownImage, ScrollableTable }} />
      </MarkdownLayout>
    </article>
  </main>
  <ContactCTA />
</BaseLayout>

<style>
  main {
    margin-bottom: 5rem;
  }

  :global(.content) {
    max-width: 65ch;
  }

  header {
    padding-bottom: 2.5rem;
  }

  .back-link,
  .github-link {
    padding: 0.3rem 0.75rem;
    font-weight: bold;
    border-radius: 999rem;
  }

  .back-link {
    background-color: color-mix(
      in srgb,
      var(--md-sys-color-surface-container-low) 30%,
      transparent
    );
  }

  .back-link:hover,
  .back-link:focus {
    background-color: color-mix(
      in srgb,
      var(--md-sys-color-surface-container-low) 50%,
      transparent
    );
  }

  .github-link {
    background-color: var(--md-sys-color-secondary);
    color: var(--md-sys-color-on-secondary);
    margin-left: auto;
    margin-right: auto;
  }

  .github-link:hover,
  .github-link:focus {
    background-color: color-mix(
      in srgb,
      var(--md-sys-color-inverse-surface) 40%,
      var(--md-sys-color-secondary)
    );
  }

  .details {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  #thumbnail {
    margin-bottom: 1rem;
    width: 100%;

    img {
      border-radius: 1.5rem;
      box-shadow: var(--shadow-sm);
      background: var(--md-sys-color-surface-container-low);
      border: 1px solid var(--outline-color);
      margin-bottom: 0.5rem;
    }

    figcaption::before {
      content: none;
      counter-increment: none;
    }
  }

  #thumbnail-divider {
    border: none;
    border-top: 1px dashed var(--md-sys-color-surface-container-highest);
    margin-bottom: 2rem;
    width: 90%;
    justify-self: center;
  }

  .back-link,
  .github-link {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .github-link:hover,
  .github-link:focus {
    text-decoration-color: currentColor;
  }

  @media (max-width: 50em) {
    .back-link {
      display: none;
    }
  }

  @media (min-width: 50em) {
    .github-link {
      margin-right: 0;
    }
  }

  @media (min-width: 70em) {
    .details {
      flex-direction: row;
      gap: 2.5rem;
    }

    .tags {
      justify-content: flex-start;
    }
  }
</style>
